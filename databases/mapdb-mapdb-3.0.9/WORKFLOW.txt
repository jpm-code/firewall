# Creating a full jar of mapdb with dependencies
#

#Add this to pom.xml

<plugin>
      <artifactId>maven-assembly-plugin</artifactId>
            <configuration>
	            <archive>
		              <manifest>
			                  <mainClass>fully.qualified.MainClass</mainClass>
					            </manifest>
						            </archive>
							            <descriptorRefs>
								              <descriptorRef>jar-with-dependencies</descriptorRef>
									              </descriptorRefs>
										            </configuration>
											        </plugin>
# Use
mvn clean compile assembly:single

# Compile goal should be added before assembly:single or otherwise the code on your own project is not included.

##########################
Creating a native image
==========================
Need to create the META data for native-image, so use a dummy main function in the class and call some methods from the jar. Then run java command below.

mkdir META-INF\native-image

java -agentlib:native-image-agent=config-output-dir=META-INF/native-image -cp mapdb-3.0.9-jar-with-dependencies.jar;. LibFunc

Next, remove the dummy main function and add the library functions with defined entry points.

==========================

javac -cp mapdb-3.0.9-jar-with-dependencies.jar;. LibFunc.java

native-image -Djava.awt.headless=false -H:ReflectionConfigurationFiles=META-INF\native-image\reflect-config.json -H:ResourceConfigurationFiles=META-INF\native-image\resource-config.json -cp mapdb-3.0.9-jar-with-dependencies.jar;. -H:Name=LibFunc --shared

cl.exe /I .\ main.c LibFunc.lib

==========================
Can also package exe and dll in enigma vm.

==========================

// Example library
// $GRAALVM_HOME/bin/javac LibEnvMap.java
// $GRAALVM_HOME/bin/native-image -H:Name=LibEnvMap --shared 

 import java.util.Map;
 import org.graalvm.nativeimage.IsolateThread;
 import org.graalvm.nativeimage.c.function.CEntryPoint;
 import org.graalvm.nativeimage.c.type.CCharPointer;
 import org.graalvm.nativeimage.c.type.CTypeConversion;

 public class LibEnvMap {
     //NOTE: this class has no main() method

     @CEntryPoint(name = "filter_env")
     private static int filterEnv(IsolateThread thread, CCharPointer cFilter) {
         String filter = CTypeConversion.toJavaString(cFilter);
         Map<String, String> env = System.getenv();
         int count = 0;
         for (String envName : env.keySet()) {
             if(!envName.contains(filter)) continue;
             System.out.format("%s=%s%n",
                             envName,
                             env.get(envName));
             count++;
         }
         return count;
     }
 }

// Calling it and compiling
// $GRAALVM_HOME/languages/llvm/native/bin/clang -I ./ -L ./ -l envmap -Wl,-rpath ./ -o main main.c 
// cl.exe /I .\ main.c envmap.lib

 #include <stdio.h>
 #include <stdlib.h>

 #include "libenvmap.h"

 int main(int argc, char **argv) {
 if (argc != 2) {
     fprintf(stderr, "Usage: %s <filter>\n", argv[0]);
     exit(1);
 }

 graal_isolate_t *isolate = NULL;
 graal_isolatethread_t *thread = NULL;

 if (graal_create_isolate(NULL, &isolate, &thread) != 0) {
     fprintf(stderr, "initialization error\n");
     return 1;
 }

 printf("Number of entries: %d\n", filter_env(thread, argv[1]));

 graal_tear_down_isolate(thread);
 }